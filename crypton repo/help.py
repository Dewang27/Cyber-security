from math import gcd
from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long

# Given values
N1 = 143786356117385195355522728814418684024129402954309769186869633376407480449846714776247533950484109173163811708549269029920405450237443197994941951104068001708682945191370596050916441792714228818475059839352105948003874426539429621408867171203559281132589926504992702401428910240117807627890055235377744541913
N4 = 119235191922699211973494433973985286182951917872084464216722572875998345005104112625024274855529546680909781406076412741844254205002739352725207590519921992295941563460138887173402493503653397592300336588721082590464192875253265214253650991510709511154297580284525736720396804660126786258245028204861220690641

# Calculate the GCD
common_prime = gcd(N1, N4)
print(f"GCD(N1, N4): {common_prime}")

# Ensure common_prime is non-trivial
if common_prime == 1:
    print("The common prime factor is 1, indicating no shared prime factor.")
else:
    # Factorize N1 and N4 using the common prime
    p = common_prime
    q1 = N1 // p
    q4 = N4 // p

    # Check that p*q1 and p*q4 are indeed N1 and N4
    assert p * q1 == N1, "Factorization of N1 is incorrect"
    assert p * q4 == N4, "Factorization of N4 is incorrect"

    print(f"Factors of N1: p = {p}, q1 = {q1}")
    print(f"Factors of N4: p = {p}, q4 = {q4}")

    # Public exponents
    e1 = 114194
    e4 = 79874

    # Compute φ(N1) and φ(N4)
    phi_N1 = (p - 1) * (q1 - 1)
    phi_N4 = (p - 1) * (q4 - 1)

    print(f"φ(N1): {phi_N1}")
    print(f"φ(N4): {phi_N4}")

    # Ensure e1 and e4 are coprime with φ(N1) and φ(N4)
    if gcd(e1, phi_N1) != 1:
        print(f"e1 = {e1} is not coprime with φ(N1) = {phi_N1}")
    else:
        # Compute the private key d1
        d1 = inverse(e1, phi_N1)
        print(f"Private key d1: {d1}")

    if gcd(e4, phi_N4) != 1:
        print(f"e4 = {e4} is not coprime with φ(N4) = {phi_N4}")
    else:
        # Compute the private key d4
        d4 = inverse(e4, phi_N4)
        print(f"Private key d4: {d4}")

    # Ciphertexts
    ct = [
        34943824362462051475439609860986286625097917254769992684531612871294614856690993625422102239300455875400180940827337108973553340116006700813962845108306775061807771798677331776776087624920752330960492952788171820918812097482324476781977911089173788391141053829326494066691149133321712271259020648897928520189,
        4743244068365552420209140803417963869291910728014408305705098832800979826546295528784228614201258773962840198361153425398446792423254816324235997367567266140787521099128953217102321544379954122320056718121038848177979736749293956797577132473968287657031524349527842844658154543429201866908527253115274890199,
        66550014799561365083091783719623771746918277985501922053790072464599537269932688887182935272628399936416172749363313948057068010977413380553162126517169978713906334811138977160539541748553518289758709821616339296366724858633948736343662069276955729617957504763092417726031485478470662075093853322498584295518,
        70596185817715684246133217569983212242450092071904292859814963870489673624668023857827984832687652148472843835894669753584546744978963003957696231100467564470610827538968693796124243067457119696785576517406547775014560413988293032573068710556751028775308757356169293243574865040230114664683209980437134663172
    ]

    # Decrypt the ciphertexts for N1 and N4 (if private keys are computed successfully)
    if gcd(e1, phi_N1) == 1:
        m1 = pow(ct[0], d1, N1)
        decrypted_message1 = long_to_bytes(m1)
        print(f"Decrypted message for N1: {decrypted_message1}")

    if gcd(e4, phi_N4) == 1:
        m4 = pow(ct[3], d4, N4)
        decrypted_message4 = long_to_bytes(m4)
        print(f"Decrypted message for N4: {decrypted_message4}")
